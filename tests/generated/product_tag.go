// ProductTag automatically generated by SDKgen please do not edit this file manually
// @see https://sdkgen.app

package generated

import (
	"bytes"
	"encoding/json"
	"errors"
	"fmt"
	"github.com/apioo/sdkgen-go"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type ProductTag struct {
	internal *sdkgen.TagAbstract
}

// GetAll Returns a collection
func (client *ProductTag) GetAll(startIndex int, count int, search string) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})
	queryParams["startIndex"] = startIndex
	queryParams["count"] = count
	queryParams["search"] = search

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return TestResponse{}, err
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Create Creates a new product
func (client *ProductTag) Create(payload TestRequest) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	raw, err := json.Marshal(payload)
	if err != nil {
		return TestResponse{}, err
	}

	var reqBody = bytes.NewReader(raw)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	if statusCode == 500 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return TestResponse{}, &TestResponseException{
			Payload:  data,
			Previous: err,
		}
	}

	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Update Updates an existing product
func (client *ProductTag) Update(id int, payload TestRequest) (TestResponse, error) {
	pathParams := make(map[string]interface{})
	pathParams["id"] = id

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/:id", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	raw, err := json.Marshal(payload)
	if err != nil {
		return TestResponse{}, err
	}

	var reqBody = bytes.NewReader(raw)

	req, err := http.NewRequest("PUT", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Patch Patches an existing product
func (client *ProductTag) Patch(id int, payload TestRequest) (TestResponse, error) {
	pathParams := make(map[string]interface{})
	pathParams["id"] = id

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/:id", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	raw, err := json.Marshal(payload)
	if err != nil {
		return TestResponse{}, err
	}

	var reqBody = bytes.NewReader(raw)

	req, err := http.NewRequest("PATCH", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Delete Deletes an existing product
func (client *ProductTag) Delete(id int) (TestResponse, error) {
	pathParams := make(map[string]interface{})
	pathParams["id"] = id

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/:id", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	req, err := http.NewRequest("DELETE", u.String(), nil)
	if err != nil {
		return TestResponse{}, err
	}

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Binary Test binary content type
func (client *ProductTag) Binary(payload []byte) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/binary", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	var reqBody = bytes.NewReader(payload)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "application/octet-stream")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	if statusCode == 500 {
		var data = respBody
		err = nil

		return TestResponse{}, &BinaryException{
			Payload:  data,
			Previous: err,
		}
	}

	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Form Test form content type
func (client *ProductTag) Form(payload url.Values) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/form", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	var reqBody = strings.NewReader(payload.Encode())

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	if statusCode == 500 {
		data, err := url.ParseQuery(string(respBody))

		return TestResponse{}, &FormException{
			Payload:  data,
			Previous: err,
		}
	}

	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Json Test json content type
func (client *ProductTag) Json(payload any) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/json", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	raw, err := json.Marshal(payload)
	if err != nil {
		return TestResponse{}, err
	}

	var reqBody = bytes.NewReader(raw)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "application/json")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	if statusCode == 500 {
		var data interface{}
		err := json.Unmarshal(respBody, &data)

		return TestResponse{}, &JsonException{
			Payload:  data,
			Previous: err,
		}
	}

	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Multipart Test json content type
func (client *ProductTag) Multipart(payload *sdkgen.Multipart) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/multipart", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	var reqBody = payload.Build()

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", payload.GetContentType())

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	if statusCode == 500 {
		// @TODO currently not possible, please create an issue at https://github.com/apioo/typeapi if needed
		var data = &sdkgen.Multipart{}
		err = nil

		return TestResponse{}, &MultipartException{
			Payload:  data,
			Previous: err,
		}
	}

	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Text Test text content type
func (client *ProductTag) Text(payload string) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/text", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	var reqBody = strings.NewReader(payload)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "text/plain")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	if statusCode == 500 {
		var data = string(respBody)
		err = nil

		return TestResponse{}, &TextException{
			Payload:  data,
			Previous: err,
		}
	}

	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

// Xml Test xml content type
func (client *ProductTag) Xml(payload string) (TestResponse, error) {
	pathParams := make(map[string]interface{})

	queryParams := make(map[string]interface{})

	var queryStructNames []string

	u, err := url.Parse(client.internal.Parser.Url("/anything/xml", pathParams))
	if err != nil {
		return TestResponse{}, err
	}

	u.RawQuery = client.internal.Parser.QueryWithStruct(queryParams, queryStructNames).Encode()

	var reqBody = strings.NewReader(payload)

	req, err := http.NewRequest("POST", u.String(), reqBody)
	if err != nil {
		return TestResponse{}, err
	}

	req.Header.Set("Content-Type", "application/xml")

	resp, err := client.internal.HttpClient.Do(req)
	if err != nil {
		return TestResponse{}, err
	}

	defer resp.Body.Close()

	respBody, err := io.ReadAll(resp.Body)
	if err != nil {
		return TestResponse{}, err
	}

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		var data TestResponse
		err := json.Unmarshal(respBody, &data)

		return data, err
	}

	var statusCode = resp.StatusCode
	if statusCode == 500 {
		var data = string(respBody)
		err = nil

		return TestResponse{}, &XmlException{
			Payload:  data,
			Previous: err,
		}
	}

	return TestResponse{}, errors.New(fmt.Sprint("The server returned an unknown status code: ", statusCode))
}

func NewProductTag(httpClient *http.Client, parser *sdkgen.Parser) *ProductTag {
	return &ProductTag{
		internal: &sdkgen.TagAbstract{
			HttpClient: httpClient,
			Parser:     parser,
		},
	}
}
